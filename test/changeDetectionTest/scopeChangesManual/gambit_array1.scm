(define (create-x n)
  (define result (make-vector n 0))
  (do ((i 0 (+ i 1)))
      ((>= i n) result)
    (vector-set! result i i)))

(define (create-y x)
  (let* ((n (vector-length x))
         (result (make-vector n 0)))
    (do ((i (- n 1) (- i 1)))
        ((< i 0) result)
      (vector-set! result i (vector-ref x i)))))

(define (go n)
  (let ((<delete> (my-try (lambda (n)
          (vector-length (create-y (create-x n)))))))
  (let loop ((repeat 100)
             (result '()))
      (let ((<insert> (my-try (lambda (n)
              (vector-length (create-y (create-x n)))))))
    (if (> repeat 0)
        (loop (- repeat 1) ((lambda () (my-try n))))
        result)))))

(= 200 (go 200))
