;; renamed lambdas/lets: 1
 
(define quick-sort (<change>
      (lambda (vector)
         (define swap (lambda (v index1 index2)
               (let ((temp (vector-ref v index1)))
                  (vector-set! v index1 (vector-ref v index2))
                  (vector-set! v index2 temp))))
         (define quick-sort-aux (lambda (low high)
               (define quick-sort-aux-iter (lambda (mid-value from to)
                     (define quick-right (lambda (index1)
                           (if (if (< index1 high) (< (vector-ref vector index1) mid-value) #f)
                              (quick-right (+ index1 1))
                              index1)))
                     (define quick-left (lambda (index2)
                           (if (if (> index2 low) (> (vector-ref vector index2) mid-value) #f)
                              (quick-left (- index2 1))
                              index2)))
                     (let ((index1 (quick-right (+ from 1)))
                           (index2 (quick-left to)))
                        (if (< index1 index2)
                           (begin
                              (swap vector index1 index2)
                              (quick-sort-aux-iter mid-value index1 index2))
                           index2))))
               (if (< low high)
                  (let ((middle (quotient (+ low high) 2))
                        (pivot-index (+ low 1)))
                     (swap vector middle pivot-index)
                     (if (> (vector-ref vector pivot-index) (vector-ref vector high))
                        (swap vector pivot-index high)
                        #f)
                     (if (> (vector-ref vector low) (vector-ref vector high))
                        (swap vector low high)
                        #f)
                     (if (< (vector-ref vector pivot-index) (vector-ref vector low))
                        (swap vector pivot-index low)
                        #f)
                     (let ((mid-index (quick-sort-aux-iter (vector-ref vector pivot-index) (+ low 1) high)))
                        (swap vector mid-index pivot-index)
                        (quick-sort-aux low (- mid-index 1))
                        (quick-sort-aux (+ mid-index 1) high)))
                  #f)))
         (quick-sort-aux 0 (- (vector-length vector) 1)))
      (lambda (_vector0)
         (define swap (lambda (_v0 _index10 _index20)
               (let ((_temp0 (vector-ref _v0 _index10)))
                  (vector-set! _v0 _index10 (vector-ref _v0 _index20))
                  (vector-set! _v0 _index20 _temp0))))
         (define quick-sort-aux (lambda (_low0 _high0)
               (define quick-sort-aux-iter (lambda (_mid-value0 _from0 _to0)
                     (define quick-right (lambda (_index11)
                           (if (if (< _index11 _high0) (< (vector-ref _vector0 _index11) _mid-value0) #f)
                              (quick-right (+ _index11 1))
                              _index11)))
                     (define quick-left (lambda (_index21)
                           (if (if (> _index21 _low0) (> (vector-ref _vector0 _index21) _mid-value0) #f)
                              (quick-left (- _index21 1))
                              _index21)))
                     (let ((_index12 (quick-right (+ _from0 1)))
                           (_index22 (quick-left _to0)))
                        (if (< _index12 _index22)
                           (begin
                              (swap _vector0 _index12 _index22)
                              (quick-sort-aux-iter _mid-value0 _index12 _index22))
                           _index22))))
               (if (< _low0 _high0)
                  (let ((_middle0 (quotient (+ _low0 _high0) 2))
                        (_pivot-index0 (+ _low0 1)))
                     (swap _vector0 _middle0 _pivot-index0)
                     (if (> (vector-ref _vector0 _pivot-index0) (vector-ref _vector0 _high0))
                        (swap _vector0 _pivot-index0 _high0)
                        #f)
                     (if (> (vector-ref _vector0 _low0) (vector-ref _vector0 _high0))
                        (swap _vector0 _low0 _high0)
                        #f)
                     (if (< (vector-ref _vector0 _pivot-index0) (vector-ref _vector0 _low0))
                        (swap _vector0 _pivot-index0 _low0)
                        #f)
                     (let ((_mid-index0 (quick-sort-aux-iter (vector-ref _vector0 _pivot-index0) (+ _low0 1) _high0)))
                        (swap _vector0 _mid-index0 _pivot-index0)
                        (quick-sort-aux _low0 (- _mid-index0 1))
                        (quick-sort-aux (+ _mid-index0 1) _high0)))
                  #f)))
         (quick-sort-aux 0 (- (vector-length _vector0) 1)))))
 
(define test3 (vector 8 3 6 6 1 5 4 2 9 6))
 
(quick-sort test3)
 
(equal? test3 (vector 1 2 3 4 5 6 6 6 8 9))
 
