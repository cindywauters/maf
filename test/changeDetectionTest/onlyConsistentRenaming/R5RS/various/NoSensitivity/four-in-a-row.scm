;; renamed lambdas/lets: 23
 
(define down-key 0)
 
(define left-key 1)
 
(define right-key 2)
 
(define pi 3.141500e+00)
 
(define MAX_LOOP_ITERATIONS 10)
 
(define global-min #f)
 
(define global-max #f)
 
(define global-draw-adt #f)
 
(define global-current 0)
 
(define remq (lambda (x l)
      (if (pair? l)
         (if (eq? x (car l))
            (remq x (cdr l))
            (cons x (remq x (cdr l))))
         l)))
 
(define enter-keyboard-input (lambda ()
      (random 3)))
 
(define make-window (<change>
      (lambda (w h title)
         (let* ((show-fps #t)
                (fps 0)
                (delta-time 0)
                (previous-time 0)
                (keyboard-callback (lambda (ev)
                                     0))
                (update-callback (lambda ()
                                   0))
                (layers ())
                (closed #f))
            (define paint-callback (lambda ()
                  (update-callback)
                  (set! fps (calculate-fps delta-time))))
            (define calculate-fps (lambda (delta-time)
                  (if (not (= delta-time 0))
                     (/ 1000 delta-time)
                     fps)))
            (define add-layer (lambda ()
                  (define layer (make-layer w h))
                  (set! layers (append layers (cons layer ())))
                  layer))
            (define set-background! (lambda (colorstring)
                  0))
            (define game-loop (lambda ()
                  (keyboard-callback (enter-keyboard-input))
                  (paint-callback)))
            (define window-dispatch (lambda (msg)
                  (if (eq? msg 'make-layer)
                     (add-layer)
                     (if (eq? msg 'set-background!)
                        (lambda (mw-sb)
                           (set-background! mw-sb))
                        (if (eq? msg 'set-key-callback!)
                           (lambda (eh)
                              (set! keyboard-callback eh))
                           (if (eq? msg 'set-update-callback!)
                              (lambda (gl)
                                 (set! update-callback gl))
                              (if (eq? msg 'game-loop)
                                 (lambda ()
                                    (game-loop))
                                 (error msg))))))))
            window-dispatch))
      (lambda (_w0 _h0 _title0)
         (let* ((_show-fps0 #t)
                (_fps0 0)
                (_delta-time0 0)
                (_previous-time0 0)
                (_keyboard-callback0 (lambda (_ev0)
                                       0))
                (_update-callback0 (lambda ()
                                     0))
                (_layers0 ())
                (_closed0 #f))
            (define paint-callback (lambda ()
                  (_update-callback0)
                  (set! _fps0 (calculate-fps _delta-time0))))
            (define calculate-fps (lambda (_delta-time1)
                  (if (not (= _delta-time1 0))
                     (/ 1000 _delta-time1)
                     _fps0)))
            (define add-layer (lambda ()
                  (define layer (make-layer _w0 _h0))
                  (set! _layers0 (append _layers0 (cons layer ())))
                  layer))
            (define set-background! (lambda (_colorstring0)
                  0))
            (define game-loop (lambda ()
                  (_keyboard-callback0 (enter-keyboard-input))
                  (paint-callback)))
            (define window-dispatch (lambda (_msg0)
                  (if (eq? _msg0 'make-layer)
                     (add-layer)
                     (if (eq? _msg0 'set-background!)
                        (lambda (_mw-sb0)
                           (set-background! _mw-sb0))
                        (if (eq? _msg0 'set-key-callback!)
                           (lambda (_eh0)
                              (set! _keyboard-callback0 _eh0))
                           (if (eq? _msg0 'set-update-callback!)
                              (lambda (_gl0)
                                 (set! _update-callback0 _gl0))
                              (if (eq? _msg0 'game-loop)
                                 (lambda ()
                                    (game-loop))
                                 (error _msg0))))))))
            window-dispatch))))
 
(define get-bitmap (lambda (file)
      0))
 
(define get-bitmap-section (<change>
      (lambda (tilebitmap x y width height)
         0)
      (lambda (_tilebitmap0 _x0 _y0 _width0 _height0)
         0)))
 
(define generate-mask (<change>
      (lambda (bitmappath background-color)
         0)
      (lambda (_bitmappath0 _background-color0)
         0)))
 
(define make-bitmap-tile (lambda (bitmappath mask)
      (let ((x 0)
            (y 0))
         (define bitmap-tile-dispatch (<change>
               (lambda (msg)
                  (if (eq? msg 'set-x!)
                     (lambda (new-x)
                        (set! x new-x))
                     (if (eq? msg 'set-y!)
                        (lambda (new-y)
                           (set! y new-y))
                        (if (eq? msg 'get-x)
                           (lambda ()
                              x)
                           (if (eq? msg 'get-y) (lambda () y) (error msg))))))
               (lambda (_msg0)
                  (if (eq? _msg0 'set-x!)
                     (lambda (_new-x0)
                        (set! x _new-x0))
                     (if (eq? _msg0 'set-y!)
                        (lambda (_new-y0)
                           (set! y _new-y0))
                        (if (eq? _msg0 'get-x)
                           (lambda ()
                              x)
                           (if (eq? _msg0 'get-y)
                              (lambda ()
                                 y)
                              (error _msg0))))))))
         bitmap-tile-dispatch)))
 
(define make-tile (lambda (w h bitmap mask)
      (if (string? bitmap)
         (set! bitmap (get-bitmap bitmap))
         #f)
      (if (string? mask)
         (set! mask (get-bitmap mask))
         #f)
      (<change>
         (let* ((x 0)
                (y 0)
                (update-callback (lambda ()
                                   #t))
                (rotation 0))
            (define clear (lambda ()
                  (update-callback)))
            (define draw-rectangle (lambda (x y w h color)
                  (if (string? color) (set! color "") #f)
                  (update-callback)))
            (define draw-ellipse (lambda (x y w h color)
                  (if (string? color) "" #f)
                  (update-callback)))
            (define draw-line (lambda (x y w h color)
                  (if (string? color) "" #f)
                  (update-callback)))
            (define draw-text (lambda (text fontsize x y color)
                  (if (string? color) (set! color "") #f)
                  (update-callback)))
            (define rotate-clockwise (lambda ()
                  (set! rotation (modulo (+ rotation 90) 360))
                  (rotate rotation)))
            (define rotate-counterclockwise (lambda ()
                  (set! rotation (modulo (- rotation 90) 360))
                  (if (< rotation 0) (set! rotation 270) #f)
                  (rotate rotation)))
            (define rotate (lambda (tempr)
                  (set! rotation tempr)
                  (if (not (let ((__or_res (eq? 90 tempr))) (if __or_res __or_res (let ((__or_res (eq? 0 tempr))) (if __or_res __or_res (let ((__or_res (eq? 180 tempr))) (if __or_res __or_res (eq? 270 tempr))))))))
                     (begin
                        (display "ERROR ::: illegal rotation given, only 0,90,180,270 is allowed: ")
                        (newline))
                     #f)
                  (update-callback)))
            (define set-x! (lambda (new_x)
                  (set! x new_x)
                  (update-callback)))
            (define set-y! (lambda (new_y)
                  (set! y new_y)
                  (update-callback)))
            (define draw (lambda (dc)
                  0))
            (define set-on-update! (lambda (new_callback)
                  (set! update-callback new_callback)))
            (define tile-dispatch (lambda (msg)
                  (if (eq? msg 'draw)
                     (lambda (x-graphics-1)
                        (draw x-graphics-1))
                     (if (eq? msg 'set-on-update!)
                        (lambda (x-graphics-2)
                           (set-on-update! x-graphics-2))
                        (if (eq? msg 'set-x!)
                           (lambda (x-graphics-3)
                              (set-x! x-graphics-3))
                           (if (eq? msg 'set-y!)
                              (lambda (x-graphics-4)
                                 (set-y! x-graphics-4))
                              (if (eq? msg 'get-x)
                                 (lambda ()
                                    x)
                                 (if (eq? msg 'get-y)
                                    (lambda ()
                                       y)
                                    (if (eq? msg 'get-w)
                                       (lambda ()
                                          w)
                                       (if (eq? msg 'get-h)
                                          (lambda ()
                                             h)
                                          (if (eq? msg 'rotate-clockwise)
                                             (lambda ()
                                                (rotate-clockwise))
                                             (if (eq? msg 'rotate-counterclockwise)
                                                (lambda ()
                                                   (rotate-counterclockwise))
                                                (if (eq? msg 'clear)
                                                   (lambda ()
                                                      (clear))
                                                   (if (eq? msg 'draw-rectangle)
                                                      (lambda (x-5 x-6 x-7 x-8 x-9)
                                                         (draw-rectangle x-5 x-6 x-7 x-8 x-9))
                                                      (if (eq? msg 'draw-line)
                                                         (lambda (x-10 x-11 x-12 x-13 x-14)
                                                            (draw-line x-10 x-11 x-12 x-13 x-14))
                                                         (if (eq? msg 'draw-ellipse)
                                                            (lambda (x-15 x-16 x-17 x-18 x-19)
                                                               (draw-ellipse x-15 x-16 x-17 x-18 x-19))
                                                            (if (eq? msg 'draw-text)
                                                               (lambda (x-20 x-21 x-22 x-23 x-24)
                                                                  (draw-text x-20 x-21 x-22 x-23 x-24))
                                                               (error msg))))))))))))))))))
            tile-dispatch)
         (let* ((_x0 0)
                (_y0 0)
                (_update-callback0 (lambda ()
                                     #t))
                (_rotation0 0))
            (define clear (lambda ()
                  (_update-callback0)))
            (define draw-rectangle (lambda (_x1 _y1 _w0 _h0 _color0)
                  (if (string? _color0) (set! _color0 "") #f)
                  (_update-callback0)))
            (define draw-ellipse (lambda (_x2 _y2 _w1 _h1 _color1)
                  (if (string? _color1) "" #f)
                  (_update-callback0)))
            (define draw-line (lambda (_x3 _y3 _w2 _h2 _color2)
                  (if (string? _color2) "" #f)
                  (_update-callback0)))
            (define draw-text (lambda (_text0 _fontsize0 _x4 _y4 _color3)
                  (if (string? _color3) (set! _color3 "") #f)
                  (_update-callback0)))
            (define rotate-clockwise (lambda ()
                  (set! _rotation0 (modulo (+ _rotation0 90) 360))
                  (rotate _rotation0)))
            (define rotate-counterclockwise (lambda ()
                  (set! _rotation0 (modulo (- _rotation0 90) 360))
                  (if (< _rotation0 0) (set! _rotation0 270) #f)
                  (rotate _rotation0)))
            (define rotate (lambda (_tempr0)
                  (set! _rotation0 _tempr0)
                  (if (not (let ((___or_res0 (eq? 90 _tempr0))) (if ___or_res0 ___or_res0 (let ((___or_res1 (eq? 0 _tempr0))) (if ___or_res1 ___or_res1 (let ((___or_res2 (eq? 180 _tempr0))) (if ___or_res2 ___or_res2 (eq? 270 _tempr0))))))))
                     (begin
                        (display "ERROR ::: illegal rotation given, only 0,90,180,270 is allowed: ")
                        (newline))
                     #f)
                  (_update-callback0)))
            (define set-x! (lambda (_new_x0)
                  (set! _x0 _new_x0)
                  (_update-callback0)))
            (define set-y! (lambda (_new_y0)
                  (set! _y0 _new_y0)
                  (_update-callback0)))
            (define draw (lambda (_dc0)
                  0))
            (define set-on-update! (lambda (_new_callback0)
                  (set! _update-callback0 _new_callback0)))
            (define tile-dispatch (lambda (_msg0)
                  (if (eq? _msg0 'draw)
                     (lambda (_x-graphics-10)
                        (draw _x-graphics-10))
                     (if (eq? _msg0 'set-on-update!)
                        (lambda (_x-graphics-20)
                           (set-on-update! _x-graphics-20))
                        (if (eq? _msg0 'set-x!)
                           (lambda (_x-graphics-30)
                              (set-x! _x-graphics-30))
                           (if (eq? _msg0 'set-y!)
                              (lambda (_x-graphics-40)
                                 (set-y! _x-graphics-40))
                              (if (eq? _msg0 'get-x)
                                 (lambda ()
                                    _x0)
                                 (if (eq? _msg0 'get-y)
                                    (lambda ()
                                       _y0)
                                    (if (eq? _msg0 'get-w)
                                       (lambda ()
                                          w)
                                       (if (eq? _msg0 'get-h)
                                          (lambda ()
                                             h)
                                          (if (eq? _msg0 'rotate-clockwise)
                                             (lambda ()
                                                (rotate-clockwise))
                                             (if (eq? _msg0 'rotate-counterclockwise)
                                                (lambda ()
                                                   (rotate-counterclockwise))
                                                (if (eq? _msg0 'clear)
                                                   (lambda ()
                                                      (clear))
                                                   (if (eq? _msg0 'draw-rectangle)
                                                      (lambda (_x-50 _x-60 _x-70 _x-80 _x-90)
                                                         (draw-rectangle _x-50 _x-60 _x-70 _x-80 _x-90))
                                                      (if (eq? _msg0 'draw-line)
                                                         (lambda (_x-100 _x-110 _x-120 _x-130 _x-140)
                                                            (draw-line _x-100 _x-110 _x-120 _x-130 _x-140))
                                                         (if (eq? _msg0 'draw-ellipse)
                                                            (lambda (_x-150 _x-160 _x-170 _x-180 _x-190)
                                                               (draw-ellipse _x-150 _x-160 _x-170 _x-180 _x-190))
                                                            (if (eq? _msg0 'draw-text)
                                                               (lambda (_x-200 _x-210 _x-220 _x-230 _x-240)
                                                                  (draw-text _x-200 _x-210 _x-220 _x-230 _x-240))
                                                               (error _msg0))))))))))))))))))
            tile-dispatch))))
 
(define make-tile-sequence (<change>
      (lambda (tiles)
         (let ((index 0)
               (update-callback (lambda ()
                                  #t)))
            (define set-x! (lambda (new_x)
                  (for-each (lambda (tile) ((tile 'set-x!) new_x)) tiles)
                  (update-callback)))
            (define set-y! (lambda (new_y)
                  (for-each (lambda (tile) ((tile 'set-y!) new_y)) tiles)
                  (update-callback)))
            (define set-current! (lambda (new_index)
                  (if (let ((__or_res (>= new_index (length tiles)))) (if __or_res __or_res (< new_index 0)))
                     (begin
                        (display "ERROR ::: illegal index given for tile-sequence: ")
                        (display new_index)
                        (newline))
                     (begin
                        (set! index new_index)
                        (update-callback)))))
            (define set-previous! (lambda ()
                  (set! index (modulo (- index 1) (length tiles)))
                  (if (< index 0)
                     (set! index (- (length tiles) 1))
                     #f)
                  (update-callback)))
            (define set-next! (lambda ()
                  (set! index (modulo (+ 1 index) (length tiles)))
                  (update-callback)))
            (define rotate-clockwise (lambda ()
                  (for-each (lambda (tile) (tile 'rotate-clockwise)) tiles)
                  (update-callback)))
            (define rotate-counterclockwise (lambda ()
                  (for-each (lambda (tile) (tile 'rotate-counterclockwise)) tiles)
                  (update-callback)))
            (define draw-rectangle (lambda (x y w h color)
                  (for-each (lambda (tile) ((tile 'draw-rectangle) x y w h color)) tiles)
                  (update-callback)))
            (define draw-ellipse (lambda (x y w h color)
                  (for-each (lambda (tile) ((tile 'draw-ellipse) x y w h color)) tiles)
                  (update-callback)))
            (define draw-text (lambda (text fontsize x y color)
                  (for-each (lambda (tile) ((tile 'draw-text) text fontsize x y color)) tiles)
                  (update-callback)))
            (define draw-line (lambda (x y w h width color)
                  (for-each (lambda (tile) ((tile 'draw-line) x y w h width color)) tiles)
                  (update-callback)))
            (define clear (lambda ()
                  (for-each (lambda (tile) (tile 'clear)) tiles)
                  (update-callback)))
            (define draw (lambda (dc)
                  (((current) 'draw) dc)))
            (define set-on-update! (lambda (new_callback)
                  (set! update-callback new_callback)))
            (define current (lambda ()
                  (list-ref tiles index)))
            (define tile-sequence-dispatch (lambda (msg)
                  (if (eq? msg 'draw)
                     draw
                     (if (eq? msg 'set-on-update!)
                        set-on-update!
                        (if (eq? msg 'set-x!)
                           set-x!
                           (if (eq? msg 'set-y!)
                              set-y!
                              (if (eq? msg 'get-x)
                                 ((current) 'get-x)
                                 (if (eq? msg 'get-y)
                                    ((current) 'get-y)
                                    (if (eq? msg 'get-w)
                                       ((current) 'get-w)
                                       (if (eq? msg 'get-h)
                                          ((current) 'get-h)
                                          (if (eq? msg 'set-current!)
                                             set-current!
                                             (if (eq? msg 'set-next!)
                                                (set-next!)
                                                (if (eq? msg 'set-previous!)
                                                   (set-previous!)
                                                   (if (eq? msg 'rotate-clockwise)
                                                      (rotate-clockwise)
                                                      (if (eq? msg 'rotate-counterclockwise)
                                                         (rotate-counterclockwise)
                                                         (if (eq? msg 'clear)
                                                            (clear)
                                                            (if (eq? msg 'draw-rectangle)
                                                               draw-rectangle
                                                               (if (eq? msg 'draw-ellipse)
                                                                  draw-ellipse
                                                                  (if (eq? msg 'draw-line)
                                                                     draw-line
                                                                     (if (eq? msg 'draw-text) draw-text (error msg)))))))))))))))))))))
            tile-sequence-dispatch))
      (lambda (_tiles0)
         (let ((_index0 0)
               (_update-callback0 (lambda ()
                                    #t)))
            (define set-x! (lambda (_new_x0)
                  (for-each (lambda (_tile0) ((_tile0 'set-x!) _new_x0)) _tiles0)
                  (_update-callback0)))
            (define set-y! (lambda (_new_y0)
                  (for-each (lambda (_tile1) ((_tile1 'set-y!) _new_y0)) _tiles0)
                  (_update-callback0)))
            (define set-current! (lambda (_new_index0)
                  (if (let ((___or_res0 (>= _new_index0 (length _tiles0)))) (if ___or_res0 ___or_res0 (< _new_index0 0)))
                     (begin
                        (display "ERROR ::: illegal index given for tile-sequence: ")
                        (display _new_index0)
                        (newline))
                     (begin
                        (set! _index0 _new_index0)
                        (_update-callback0)))))
            (define set-previous! (lambda ()
                  (set! _index0 (modulo (- _index0 1) (length _tiles0)))
                  (if (< _index0 0)
                     (set! _index0 (- (length _tiles0) 1))
                     #f)
                  (_update-callback0)))
            (define set-next! (lambda ()
                  (set! _index0 (modulo (+ 1 _index0) (length _tiles0)))
                  (_update-callback0)))
            (define rotate-clockwise (lambda ()
                  (for-each (lambda (_tile2) (_tile2 'rotate-clockwise)) _tiles0)
                  (_update-callback0)))
            (define rotate-counterclockwise (lambda ()
                  (for-each (lambda (_tile3) (_tile3 'rotate-counterclockwise)) _tiles0)
                  (_update-callback0)))
            (define draw-rectangle (lambda (_x0 _y0 _w0 _h0 _color0)
                  (for-each (lambda (_tile4) ((_tile4 'draw-rectangle) _x0 _y0 _w0 _h0 _color0)) _tiles0)
                  (_update-callback0)))
            (define draw-ellipse (lambda (_x1 _y1 _w1 _h1 _color1)
                  (for-each (lambda (_tile5) ((_tile5 'draw-ellipse) _x1 _y1 _w1 _h1 _color1)) _tiles0)
                  (_update-callback0)))
            (define draw-text (lambda (_text0 _fontsize0 _x2 _y2 _color2)
                  (for-each (lambda (_tile6) ((_tile6 'draw-text) _text0 _fontsize0 _x2 _y2 _color2)) _tiles0)
                  (_update-callback0)))
            (define draw-line (lambda (_x3 _y3 _w2 _h2 _width0 _color3)
                  (for-each (lambda (_tile7) ((_tile7 'draw-line) _x3 _y3 _w2 _h2 _width0 _color3)) _tiles0)
                  (_update-callback0)))
            (define clear (lambda ()
                  (for-each (lambda (_tile8) (_tile8 'clear)) _tiles0)
                  (_update-callback0)))
            (define draw (lambda (_dc0)
                  (((current) 'draw) _dc0)))
            (define set-on-update! (lambda (_new_callback0)
                  (set! _update-callback0 _new_callback0)))
            (define current (lambda ()
                  (list-ref _tiles0 _index0)))
            (define tile-sequence-dispatch (lambda (_msg0)
                  (if (eq? _msg0 'draw)
                     draw
                     (if (eq? _msg0 'set-on-update!)
                        set-on-update!
                        (if (eq? _msg0 'set-x!)
                           set-x!
                           (if (eq? _msg0 'set-y!)
                              set-y!
                              (if (eq? _msg0 'get-x)
                                 ((current) 'get-x)
                                 (if (eq? _msg0 'get-y)
                                    ((current) 'get-y)
                                    (if (eq? _msg0 'get-w)
                                       ((current) 'get-w)
                                       (if (eq? _msg0 'get-h)
                                          ((current) 'get-h)
                                          (if (eq? _msg0 'set-current!)
                                             set-current!
                                             (if (eq? _msg0 'set-next!)
                                                (set-next!)
                                                (if (eq? _msg0 'set-previous!)
                                                   (set-previous!)
                                                   (if (eq? _msg0 'rotate-clockwise)
                                                      (rotate-clockwise)
                                                      (if (eq? _msg0 'rotate-counterclockwise)
                                                         (rotate-counterclockwise)
                                                         (if (eq? _msg0 'clear)
                                                            (clear)
                                                            (if (eq? _msg0 'draw-rectangle)
                                                               draw-rectangle
                                                               (if (eq? _msg0 'draw-ellipse)
                                                                  draw-ellipse
                                                                  (if (eq? _msg0 'draw-line)
                                                                     draw-line
                                                                     (if (eq? _msg0 'draw-text)
                                                                        draw-text
                                                                        (error _msg0)))))))))))))))))))))
            tile-sequence-dispatch))))
 
(define make-layer (lambda (w h)
      (<change>
         (let* ((drawables ())
                (needs-update #t))
            (define redraw (lambda ()
                  0))
            (define draw (lambda (dc)
                  (if needs-update
                     (begin
                        (redraw)
                        (set! needs-update #f))
                     #f)))
            (define add-drawable (lambda (drawable)
                  (set! drawables (cons drawable drawables))
                  (redraw)))
            (define remove-drawable (lambda (drawable)
                  ((drawable 'set-on-update!) (lambda () #t))
                  (set! drawables (remq drawable drawables))
                  (redraw)))
            (define layer-dispatch (lambda (msg)
                  (if (eq? msg 'add-drawable)
                     add-drawable
                     (if (eq? msg 'remove-drawable)
                        remove-drawable
                        (if (eq? msg 'draw) draw (error msg))))))
            layer-dispatch)
         (let* ((_drawables0 ())
                (_needs-update0 #t))
            (define redraw (lambda ()
                  0))
            (define draw (lambda (_dc0)
                  (if _needs-update0
                     (begin
                        (redraw)
                        (set! _needs-update0 #f))
                     #f)))
            (define add-drawable (lambda (_drawable0)
                  (set! _drawables0 (cons _drawable0 _drawables0))
                  (redraw)))
            (define remove-drawable (lambda (_drawable1)
                  ((_drawable1 'set-on-update!) (lambda () #t))
                  (set! _drawables0 (remq _drawable1 _drawables0))
                  (redraw)))
            (define layer-dispatch (lambda (_msg0)
                  (if (eq? _msg0 'add-drawable)
                     add-drawable
                     (if (eq? _msg0 'remove-drawable)
                        remove-drawable
                        (if (eq? _msg0 'draw) draw (error _msg0))))))
            layer-dispatch))))
 
(define add1 (<change>
      (lambda (add1-x)
         (+ add1-x 1))
      (lambda (_add1-x0)
         (+ _add1-x0 1))))
 
(define sub1 (<change>
      (lambda (sub1-x)
         (- sub1-x 1))
      (lambda (_sub1-x0)
         (- _sub1-x0 1))))
 
(define fill-vector! (<change>
      (lambda (lambda-fun vector)
         (define fill-vector-iter! (lambda (i vector)
               (if (= i (vector-length vector))
                  vector
                  (begin
                     (vector-set! vector i (lambda-fun i))
                     (fill-vector-iter! (+ i 1) vector)))))
         (fill-vector-iter! 0 vector))
      (lambda (_lambda-fun0 _vector0)
         (define fill-vector-iter! (lambda (_i0 _vector1)
               (if (= _i0 (vector-length _vector1))
                  _vector1
                  (begin
                     (vector-set! _vector1 _i0 (_lambda-fun0 _i0))
                     (fill-vector-iter! (+ _i0 1) _vector1)))))
         (fill-vector-iter! 0 _vector0))))
 
(define make-matrix (lambda (x y l)
      (let ((matrix-data (make-vector x (make-vector y #f))))
         (define set-matrix! (lambda (x y value)
               (vector-set! (vector-ref matrix-data x) y value)))
         (define get-matrix (<change>
               (lambda (x y)
                  (vector-ref (vector-ref matrix-data x) y))
               (lambda (_x0 _y0)
                  (vector-ref (vector-ref matrix-data _x0) _y0))))
         (define matrix-dispatch (lambda (msg)
               (if (eq? msg 'set!)
                  set-matrix!
                  (if (eq? msg 'get)
                     get-matrix
                     (if (eq? msg 'show) (display matrix-data) #f)))))
         (fill-vector!
            (<change>
               (lambda (i)
                  (make-vector y l))
               (lambda (_i0)
                  (make-vector y l)))
            matrix-data)
         matrix-dispatch)))
 
(define arrow (<change>
      (lambda (min max draw-adt)
         (set! global-min min)
         (set! global-max max)
         (set! global-draw-adt draw-adt)
         (set! global-current min))
      (lambda (_min0 _max0 _draw-adt0)
         (set! global-min _min0)
         (set! global-max _max0)
         (set! global-draw-adt _draw-adt0)
         (set! global-current _min0))))
 
(define arrow-draw (lambda (arrow-draw-arrow)
      ((global-draw-adt 'draw-pointer) #f)))
 
(define arrow-min (lambda (arrow-min-arrow)
      global-min))
 
(define arrow-max (<change>
      (lambda (arrow-max-arrow)
         global-max)
      (lambda (_arrow-max-arrow0)
         global-max)))
 
(define arrow-current (<change>
      (lambda (arrow-current-arrow)
         global-current)
      (lambda (_arrow-current-arrow0)
         global-current)))
 
(define arrow-left (<change>
      (lambda (arrow-left-arrow)
         (if (> (arrow-current arrow-left-arrow) (arrow-min arrow-left-arrow))
            (set! global-current (sub1 (arrow-current arrow-left-arrow)))
            #f))
      (lambda (_arrow-left-arrow0)
         (if (> (arrow-current _arrow-left-arrow0) (arrow-min _arrow-left-arrow0))
            (set! global-current (sub1 (arrow-current _arrow-left-arrow0)))
            #f))))
 
(define arrow-right (<change>
      (lambda (arrow-right-arrow)
         (if (< (arrow-current arrow-right-arrow) (arrow-max arrow-right-arrow))
            (set! global-current (add1 (arrow-current arrow-right-arrow)))
            (display "current coordinate above max")))
      (lambda (_arrow-right-arrow0)
         (if (< (arrow-current _arrow-right-arrow0) (arrow-max _arrow-right-arrow0))
            (set! global-current (add1 (arrow-current _arrow-right-arrow0)))
            (display "current coordinate above max")))))
 
(define make-coin (lambda (x y bitmap draw-adt)
      (define draw (lambda ()
            ((draw-adt 'draw-coin) coin-dispatch)))
      (define coin-dispatch (lambda (msg)
            (if (eq? msg 'bitmap)
               bitmap
               (if (eq? msg 'draw)
                  (draw)
                  (if (eq? msg 'get-x)
                     x
                     (if (eq? msg 'get-y) y #f))))))
      coin-dispatch))
 
(define make-graphics (lambda (window width height rows cols)
      (let ((background-layer (window 'make-layer))
            (layer (window 'make-layer))
            (coin-tile-list ())
            (pointer-tile (make-bitmap-tile "arrow.png" #f)))
         (define c2p-w (lambda (x)
               (* x (/ width cols))))
         (define draw-pointer (<change>
               (lambda (pointer)
                  ((pointer-tile 'set-x!) (c2p-w (arrow-current pointer))))
               (lambda (_pointer0)
                  ((pointer-tile 'set-x!) (c2p-w (arrow-current _pointer0))))))
         (define update-coin! (lambda (coin tile)
               ((tile 'set-x!) (c2p-w (coin 'get-x)))
               ((tile 'set-y!) (c2p-w (add1 (coin 'get-y))))))
         (define new-coin-tile! (<change>
               (lambda (coin)
                  (let ((coin-tile (make-bitmap-tile (coin 'bitmap) #f)))
                     (set! coin-tile-list (cons (list coin coin-tile) coin-tile-list))
                     (update-coin! coin coin-tile)
                     ((layer 'add-drawable) coin-tile)))
               (lambda (_coin0)
                  (let ((_coin-tile0 (make-bitmap-tile (_coin0 'bitmap) #f)))
                     (set! coin-tile-list (cons (list _coin0 _coin-tile0) coin-tile-list))
                     (update-coin! _coin0 _coin-tile0)
                     ((layer 'add-drawable) _coin-tile0)))))
         (define draw-coin (lambda (coin)
               (<change>
                  (let ((asc (assq coin coin-tile-list)))
                     (if asc
                        (update-coin! coin (cadr asc))
                        (new-coin-tile! coin)))
                  (let ((_asc0 (assq coin coin-tile-list)))
                     (if _asc0
                        (update-coin! coin (cadr _asc0))
                        (new-coin-tile! coin))))))
         (define graphics-dispatch (lambda (msg)
               (if (eq? msg 'draw-pointer)
                  draw-pointer
                  (if (eq? msg 'draw-coin) draw-coin #f))))
         (define make-background-row (<change>
               (lambda (x y)
                  (if (< y (add1 rows))
                     (let ((empty-tile (make-bitmap-tile "empty.png" #f)))
                        ((background-layer 'add-drawable) empty-tile)
                        ((empty-tile 'set-x!) (c2p-w x))
                        ((empty-tile 'set-y!) (c2p-w y))
                        (make-background-row x (add1 y)))
                     #f))
               (lambda (_x0 _y0)
                  (if (< _y0 (add1 rows))
                     (let ((_empty-tile0 (make-bitmap-tile "empty.png" #f)))
                        ((background-layer 'add-drawable) _empty-tile0)
                        ((_empty-tile0 'set-x!) (c2p-w _x0))
                        ((_empty-tile0 'set-y!) (c2p-w _y0))
                        (make-background-row _x0 (add1 _y0)))
                     #f))))
         (define make-background (<change>
               (lambda (x y)
                  (if (< x cols)
                     (begin
                        (make-background-row x 1)
                        (make-background (add1 x) y))
                     #f))
               (lambda (_x0 _y0)
                  (if (< _x0 cols)
                     (begin
                        (make-background-row _x0 1)
                        (make-background (add1 _x0) _y0))
                     #f))))
         ((layer 'add-drawable) pointer-tile)
         (make-background 0 0)
         graphics-dispatch)))
 
(define four-in-a-row (lambda (width height rows cols title)
      (<change>
         (let* ((window (make-window width height title))
                (game-board (make-matrix rows cols 0))
                (current-coin "blue-tile.png")
                (draw (make-graphics window width height rows cols))
                (pointer (arrow 0 (sub1 cols) draw)))
            (define switch (lambda ()
                  (if (eq? current-coin "blue-tile.png")
                     (set! current-coin "red-tile.png")
                     (set! current-coin "blue-tile.png"))))
            (define find-first (lambda (col)
                  (define find-first-iter (lambda (col r)
                        (let ((tile ((game-board 'get) r col)))
                           (if (not (eq? tile 0))
                              (sub1 r)
                              (if (= r (sub1 rows))
                                 r
                                 (find-first-iter col (add1 r)))))))
                  (find-first-iter col 0)))
            (define drop-coin (lambda ()
                  (if (if (not (eq? ((game-board 'get) 0 3) 0)) (not (eq? ((game-board 'get) 1 3) 0)) #f)
                     (error "arbitrary error")
                     #f)
                  (let ((row (find-first (arrow-current pointer))))
                     (if (>= row 0)
                        (let ((new-coin (make-coin (arrow-current pointer) row current-coin draw)))
                           (switch)
                           (new-coin 'draw)
                           ((game-board 'set!) row (arrow-current pointer) new-coin))
                        #f))))
            (define on-key (lambda (rt)
                  (if (= rt down-key)
                     (drop-coin)
                     (if (= rt left-key)
                        (arrow-left pointer)
                        (if (= rt right-key)
                           (arrow-right pointer)
                           (error rt))))))
            (define start (lambda ()
                  (define main-loop (lambda (main-loop-n)
                        (if (> main-loop-n 0)
                           (begin
                              ((window 'game-loop))
                              (main-loop (- main-loop-n 1)))
                           #f)))
                  ((window 'set-key-callback!) on-key)
                  ((window 'set-background!) "white")
                  (main-loop MAX_LOOP_ITERATIONS)))
            (define dispatch (lambda (msg)
                  (if (eq? msg 'start!) (start) #f)))
            dispatch)
         (let* ((_window0 (make-window width height title))
                (_game-board0 (make-matrix rows cols 0))
                (_current-coin0 "blue-tile.png")
                (_draw0 (make-graphics _window0 width height rows cols))
                (_pointer0 (arrow 0 (sub1 cols) _draw0)))
            (define switch (lambda ()
                  (if (eq? _current-coin0 "blue-tile.png")
                     (set! _current-coin0 "red-tile.png")
                     (set! _current-coin0 "blue-tile.png"))))
            (define find-first (lambda (_col0)
                  (define find-first-iter (lambda (_col1 _r0)
                        (let ((_tile0 ((_game-board0 'get) _r0 _col1)))
                           (if (not (eq? _tile0 0))
                              (sub1 _r0)
                              (if (= _r0 (sub1 rows))
                                 _r0
                                 (find-first-iter _col1 (add1 _r0)))))))
                  (find-first-iter _col0 0)))
            (define drop-coin (lambda ()
                  (if (if (not (eq? ((_game-board0 'get) 0 3) 0)) (not (eq? ((_game-board0 'get) 1 3) 0)) #f)
                     (error "arbitrary error")
                     #f)
                  (let ((_row0 (find-first (arrow-current _pointer0))))
                     (if (>= _row0 0)
                        (let ((_new-coin0 (make-coin (arrow-current _pointer0) _row0 _current-coin0 _draw0)))
                           (switch)
                           (_new-coin0 'draw)
                           ((_game-board0 'set!) _row0 (arrow-current _pointer0) _new-coin0))
                        #f))))
            (define on-key (lambda (_rt0)
                  (if (= _rt0 down-key)
                     (drop-coin)
                     (if (= _rt0 left-key)
                        (arrow-left _pointer0)
                        (if (= _rt0 right-key)
                           (arrow-right _pointer0)
                           (error _rt0))))))
            (define start (lambda ()
                  (define main-loop (lambda (_main-loop-n0)
                        (if (> _main-loop-n0 0)
                           (begin
                              ((_window0 'game-loop))
                              (main-loop (- _main-loop-n0 1)))
                           #f)))
                  ((_window0 'set-key-callback!) on-key)
                  ((_window0 'set-background!) "white")
                  (main-loop MAX_LOOP_ITERATIONS)))
            (define dispatch (lambda (_msg0)
                  (if (eq? _msg0 'start!) (start) #f)))
            dispatch))))
 
(define game (four-in-a-row 700 700 6 7 "four in a row"))
 
(game 'start!)
 
