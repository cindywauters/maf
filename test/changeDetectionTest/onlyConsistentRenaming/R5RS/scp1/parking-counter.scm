;; renamed lambdas/lets: 2
 
(define create-counter (<change>
      (lambda (initial)
         (define increase (lambda ()
               (set! initial (+ initial 1))))
         (define decrease (lambda ()
               (set! initial (- initial 1))))
         (define read (lambda ()
               initial))
         (define dispatch (lambda (m)
               (if (eq? m 'increase)
                  (increase)
                  (if (eq? m 'decrease)
                     (decrease)
                     (if (eq? m 'read)
                        (read)
                        (display "wrong message"))))))
         dispatch)
      (lambda (_initial0)
         (define increase (lambda ()
               (set! _initial0 (+ _initial0 1))))
         (define decrease (lambda ()
               (set! _initial0 (- _initial0 1))))
         (define read (lambda ()
               _initial0))
         (define dispatch (lambda (_m0)
               (if (eq? _m0 'increase)
                  (increase)
                  (if (eq? _m0 'decrease)
                     (decrease)
                     (if (eq? _m0 'read)
                        (read)
                        (display "wrong message"))))))
         dispatch)))
 
(define create-parking (lambda capaciteiten
      (<change>
         (let ((verdieping-ctrs (map create-counter capaciteiten))
               (nr-verdiepingen (length capaciteiten))
               (nbr-cars 0))
            (define total-capacity (lambda ()
                  (apply + capaciteiten)))
            (define full? (lambda ()
                  (= nbr-cars (total-capacity))))
            (define empty? (lambda ()
                  (= nbr-cars 0)))
            (define max-reached-level (lambda (level idx)
                  (>= (level 'read) (list-ref capaciteiten (- idx 1)))))
            (define level-current (lambda ()
                  (define loop (lambda (lst index)
                        (if (null? lst)
                           #f
                           (let* ((level (car lst))
                                  (capacity (level 'read)))
                              (if (> capacity 0)
                                 index
                                 (loop (cdr lst) (+ index 1)))))))
                  (loop verdieping-ctrs 1)))
            (define level-to-leave (lambda ()
                  (define loop (lambda (lst index)
                        (if (null? lst)
                           #f
                           (let* ((level (car lst))
                                  (capacity (level 'read)))
                              (if (if (not (max-reached-level level index)) (>= capacity 0) #f)
                                 index
                                 (loop (cdr lst) (- index 1)))))))
                  (loop (reverse verdieping-ctrs) nr-verdiepingen)))
            (define car-enters (lambda ()
                  (let ((level (level-current)))
                     (if level
                        (let ((verdieping-ctr (list-ref verdieping-ctrs (- level 1))))
                           (set! nbr-cars (+ nbr-cars 1))
                           (verdieping-ctr 'decrease))
                        #f))))
            (define car-leaves (lambda ()
                  (let ((level (level-to-leave)))
                     (if level
                        (let ((verdieping-ctr (list-ref verdieping-ctrs (- level 1))))
                           (set! nbr-cars (- nbr-cars 1))
                           (verdieping-ctr 'increase))
                        (let ((verdieping-ctr (list-ref verdieping-ctrs (- nr-verdiepingen 1))))
                           (set! nbr-cars (- nbr-cars 1))
                           (verdieping-ctr 'increase))))))
            (define dispatch (lambda (msg)
                  (if (eq? msg 'full?)
                     (full?)
                     (if (eq? msg 'empty?)
                        (empty?)
                        (if (eq? msg 'level)
                           (level-current)
                           (if (eq? msg 'car-enters)
                              (car-enters)
                              (if (eq? msg 'lst)
                                 verdieping-ctrs
                                 (if (eq? msg 'car-leaves)
                                    (car-leaves)
                                    (error "wrong message")))))))))
            dispatch)
         (let ((_verdieping-ctrs0 (map create-counter capaciteiten))
               (_nr-verdiepingen0 (length capaciteiten))
               (_nbr-cars0 0))
            (define total-capacity (lambda ()
                  (apply + capaciteiten)))
            (define full? (lambda ()
                  (= _nbr-cars0 (total-capacity))))
            (define empty? (lambda ()
                  (= _nbr-cars0 0)))
            (define max-reached-level (lambda (_level0 _idx0)
                  (>= (_level0 'read) (list-ref capaciteiten (- _idx0 1)))))
            (define level-current (lambda ()
                  (define loop (lambda (_lst0 _index0)
                        (if (null? _lst0)
                           #f
                           (let* ((_level1 (car _lst0))
                                  (_capacity0 (_level1 'read)))
                              (if (> _capacity0 0)
                                 _index0
                                 (loop (cdr _lst0) (+ _index0 1)))))))
                  (loop _verdieping-ctrs0 1)))
            (define level-to-leave (lambda ()
                  (define loop (lambda (_lst1 _index1)
                        (if (null? _lst1)
                           #f
                           (let* ((_level2 (car _lst1))
                                  (_capacity1 (_level2 'read)))
                              (if (if (not (max-reached-level _level2 _index1)) (>= _capacity1 0) #f)
                                 _index1
                                 (loop (cdr _lst1) (- _index1 1)))))))
                  (loop (reverse _verdieping-ctrs0) _nr-verdiepingen0)))
            (define car-enters (lambda ()
                  (let ((_level3 (level-current)))
                     (if _level3
                        (let ((_verdieping-ctr0 (list-ref _verdieping-ctrs0 (- _level3 1))))
                           (set! _nbr-cars0 (+ _nbr-cars0 1))
                           (_verdieping-ctr0 'decrease))
                        #f))))
            (define car-leaves (lambda ()
                  (let ((_level4 (level-to-leave)))
                     (if _level4
                        (let ((_verdieping-ctr1 (list-ref _verdieping-ctrs0 (- _level4 1))))
                           (set! _nbr-cars0 (- _nbr-cars0 1))
                           (_verdieping-ctr1 'increase))
                        (let ((_verdieping-ctr2 (list-ref _verdieping-ctrs0 (- _nr-verdiepingen0 1))))
                           (set! _nbr-cars0 (- _nbr-cars0 1))
                           (_verdieping-ctr2 'increase))))))
            (define dispatch (lambda (_msg0)
                  (if (eq? _msg0 'full?)
                     (full?)
                     (if (eq? _msg0 'empty?)
                        (empty?)
                        (if (eq? _msg0 'level)
                           (level-current)
                           (if (eq? _msg0 'car-enters)
                              (car-enters)
                              (if (eq? _msg0 'lst)
                                 _verdieping-ctrs0
                                 (if (eq? _msg0 'car-leaves)
                                    (car-leaves)
                                    (error "wrong message")))))))))
            dispatch))))
 
(define parking (create-parking 3 5 2))
 
(if (= (parking 'level) 1)
   (if (not (parking 'full?))
      (if (= (begin (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'level)) 2)
         (if (not (parking 'empty?))
            (if (begin (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'full?))
               (if (not (parking 'car-enters))
                  (= (begin (parking 'car-leaves) (parking 'car-leaves) (parking 'car-leaves) (parking 'level)) 2)
                  #f)
               #f)
            #f)
         #f)
      #f)
   #f)
 
