;; renamed lambdas/lets: 2
 
(define maak-rechthoek (<change>
      (lambda (l b)
         (define oppervlakte (lambda ()
               (* l b)))
         (define omtrek (lambda ()
               (* 2 (+ l b))))
         (define dispatch (lambda (m)
               (if (eq? m 'oppervlakte)
                  (oppervlakte)
                  (if (eq? m 'omtrek) (omtrek) #f))))
         dispatch)
      (lambda (_l0 _b0)
         (define oppervlakte (lambda ()
               (* _l0 _b0)))
         (define omtrek (lambda ()
               (* 2 (+ _l0 _b0))))
         (define dispatch (lambda (_m0)
               (if (eq? _m0 'oppervlakte)
                  (oppervlakte)
                  (if (eq? _m0 'omtrek) (omtrek) #f))))
         dispatch)))
 
(define maak-vierkant (<change>
      (lambda (zijde)
         (define rechthoek (maak-rechthoek zijde zijde))
         (define schaal! (lambda (n)
               (set! zijde (* n zijde))))
         (define dispatch (lambda (m)
               (if (eq? m 'oppervlakte)
                  (rechthoek 'oppervlakte)
                  (if (eq? m 'omtrek)
                     (rechthoek 'omtrek)
                     (if (eq? m 'schaal!) schaal! #f)))))
         dispatch)
      (lambda (_zijde0)
         (define rechthoek (maak-rechthoek _zijde0 _zijde0))
         (define schaal! (lambda (_n0)
               (set! _zijde0 (* _n0 _zijde0))))
         (define dispatch (lambda (_m0)
               (if (eq? _m0 'oppervlakte)
                  (rechthoek 'oppervlakte)
                  (if (eq? _m0 'omtrek)
                     (rechthoek 'omtrek)
                     (if (eq? _m0 'schaal!) schaal! #f)))))
         dispatch)))
 
(define test (maak-vierkant 5))
 
(if (= (test 'oppervlakte) 25)
   (if (= (test 'omtrek) 20)
      (= (begin ((test 'schaal!) 2) (test 'oppervlakte)) 25)
      #f)
   #f)
 
