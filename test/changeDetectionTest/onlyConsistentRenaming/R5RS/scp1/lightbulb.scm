;; renamed lambdas/lets: 2
 
(define MaakLampje (lambda (aantal)
      (define state 'off)
      (define on! (<change>
            (lambda ()
               (set! state 'on))
            (lambda ()
               (set! state 'on))))
      (define off!
            (lambda ()
               (set! state 'off)))
      (define broken! (lambda ()
            (set! state 'broken)))
      (define on?
            (lambda ()
               (eq? state 'on)))
      (define off?
            (lambda ()
               (eq? state 'off)))
      (define broken? (lambda ()
            (eq? state 'broken)))
      (define switch!
            (lambda ()
               (set! aantal (- aantal 1))
               (if (< aantal 0)
                  (broken!)
                  (if (off?) (on!) (if (on?) (off!) #f)))
               (not (broken?))))
      (define change! (lambda (nieuw)
            (off!)
            (set! aantal nieuw)
            'changed))
      (define dispatch (<change>
            (lambda (msg)
               (if (eq? msg 'switch!)
                  (switch!)
                  (if (eq? msg 'on?)
                     (on?)
                     (if (eq? msg 'off?)
                        (off?)
                        (if (eq? msg 'test?)
                           (broken?)
                           (if (eq? msg 'change!)
                              change!
                              (error "Message not understood.")))))))
            (lambda (_msg0)
               (if (eq? _msg0 'switch!)
                  (switch!)
                  (if (eq? _msg0 'on?)
                     (on?)
                     (if (eq? _msg0 'off?)
                        (off?)
                        (if (eq? _msg0 'test?)
                           (broken?)
                           (if (eq? _msg0 'change!)
                              change!
                              (error "Message not understood.")))))))))
      dispatch))
 
(define philips (MaakLampje 5))
 
(if (not (philips 'test?))
   (if (not (philips 'on?))
      (if (philips 'off?)
         (if (philips 'switch!)
            (if (philips 'switch!)
               (if (philips 'switch!)
                  (if (philips 'switch!)
                     (if (philips 'switch!)
                        (if (not (philips 'switch!))
                           (if (philips 'test?)
                              (if (begin ((philips 'change!) 10) (not (philips 'test?)))
                                 (philips 'off?)
                                 #f)
                              #f)
                           #f)
                        #f)
                     #f)
                  #f)
               #f)
            #f)
         #f)
      #f)
   #f)
 
